/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spdvi;


/**
 *
 * @author Alumne
 */
public class MainForm extends javax.swing.JFrame implements Runnable {
    Thread cronometroHilo;
    boolean cronometroActivo;
    boolean cronometroPausado;
    boolean cronometroIniciado = true;
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCronometro = new javax.swing.JLabel();
        btnIniciarCronometro = new javax.swing.JButton();
        btnAturarCronometro = new javax.swing.JButton();
        btnReiniciarCronometro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblCronometro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCronometro.setText("00:00:00");

        btnIniciarCronometro.setText("Inicia");
        btnIniciarCronometro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarCronometroActionPerformed(evt);
            }
        });

        btnAturarCronometro.setText("Atura");
        btnAturarCronometro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAturarCronometroActionPerformed(evt);
            }
        });

        btnReiniciarCronometro.setText("Reinicia");
        btnReiniciarCronometro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarCronometroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnIniciarCronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAturarCronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReiniciarCronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(lblCronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(lblCronometro, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIniciarCronometro)
                    .addComponent(btnAturarCronometro)
                    .addComponent(btnReiniciarCronometro))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarCronometroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarCronometroActionPerformed
        if (cronometroIniciado) {
            cronometroHilo = new Thread(this);
            cronometroActivo = true;
            cronometroPausado = false;
            cronometroHilo.start();
            cronometroIniciado = false;
        }
    }//GEN-LAST:event_btnIniciarCronometroActionPerformed

    private void btnAturarCronometroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAturarCronometroActionPerformed
        cronometroPausado = true ;
        cronometroIniciado = true;
    }//GEN-LAST:event_btnAturarCronometroActionPerformed

    private void btnReiniciarCronometroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarCronometroActionPerformed
        cronometroActivo = false;
        cronometroIniciado = true;
        lblCronometro.setText( "00:00:00" );
    }//GEN-LAST:event_btnReiniciarCronometroActionPerformed

    @Override
    public void run() {
        Integer minutos = 0, segundos = 0, milesimas = 0;
        String min="", seg="", mil="";
        try {
            while (cronometroActivo) {
                if (!cronometroPausado) {
                    Thread.sleep(4);
                    milesimas += 4;
                    if (milesimas == 1000){
                        milesimas = 0;
                        segundos++;
                        if (segundos == 60){
                            segundos = 0;
                            minutos++;
                        }
                    }
                    if( minutos < 10 ) min = "0" + minutos;
                    else min = minutos.toString();
                    if( segundos < 10 ) seg = "0" + segundos;
                    else seg = segundos.toString();

                    if( milesimas < 10 ) mil = milesimas + "";
                    else if( milesimas < 10 ) mil =  milesimas + "";
                    else mil = milesimas.toString();

                    //Colocamos en la etiqueta la informacion
                    lblCronometro.setText( min + ":" + seg + ":" + mil );
                }
            }
            lblCronometro.setText( min + ":" + seg + ":" + mil );
        }catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAturarCronometro;
    private javax.swing.JButton btnIniciarCronometro;
    private javax.swing.JButton btnReiniciarCronometro;
    private javax.swing.JLabel lblCronometro;
    // End of variables declaration//GEN-END:variables
}
